name: Test Jumpstarter Setup

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test-jumpstarter-setup:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Install dependencies
      run: |
        # Install Kind
        [ $(uname -m) = x86_64 ] && curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
        [ $(uname -m) = aarch64 ] && curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-arm64
        chmod +x ./kind
        sudo mv ./kind /usr/local/bin/kind
        
        # Install kubectl
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        
        # Install Helm
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
        
        # Install uv for Python dependencies
        curl -LsSf https://astral.sh/uv/install.sh | sh
        # Add uv to PATH (it may install to different locations)
        if [ -f ~/.cargo/env ]; then
          source ~/.cargo/env
          echo "~/.cargo/bin" >> $GITHUB_PATH
        elif [ -f ~/.local/bin/uv ]; then
          echo "~/.local/bin" >> $GITHUB_PATH
        fi

    - name: Create Kind cluster
      run: |
        echo "üöÄ Creating Kind cluster for Jumpstarter..."
        
        # Delete existing cluster if it exists (cleanup from previous runs)
        kind delete cluster --name jumpstarter-server || true
        
        # Create new cluster
        kind create cluster --config kind-config.yaml --wait 300s
        kubectl cluster-info
        kubectl get nodes

    - name: Install NGINX Ingress
      run: |
        echo "üì° Installing NGINX Ingress Controller..."
        kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml
        kubectl wait --namespace ingress-nginx \
          --for=condition=ready pod \
          --selector=app.kubernetes.io/component=controller \
          --timeout=300s

    - name: Install Jumpstarter via Helm
      run: |
        echo "‚ö° Installing Jumpstarter via Helm..."
        # Using OCI registry for Kind cluster with NodePort mode
        export IP="127.0.0.1"
        export BASEDOMAIN="jumpstarter.${IP}.nip.io"
        export GRPC_ENDPOINT="grpc.${BASEDOMAIN}:30010"
        export GRPC_ROUTER_ENDPOINT="router.${BASEDOMAIN}:30011"
        
        helm install jumpstarter oci://quay.io/jumpstarter-dev/helm/jumpstarter \
          --namespace jumpstarter-lab \
          --create-namespace \
          --wait --timeout=300s \
          --set global.baseDomain=${BASEDOMAIN} \
          --set jumpstarter-controller.grpc.endpoint=${GRPC_ENDPOINT} \
          --set jumpstarter-controller.grpc.routerEndpoint=${GRPC_ROUTER_ENDPOINT} \
          --set global.metrics.enabled=false \
          --set jumpstarter-controller.grpc.nodeport.enabled=true \
          --set jumpstarter-controller.grpc.nodeport.port=30010 \
          --set jumpstarter-controller.grpc.nodeport.routerPort=30011 \
          --set jumpstarter-controller.grpc.mode=nodeport

    - name: Wait for Jumpstarter to be ready
      run: |
        echo "‚è≥ Waiting for Jumpstarter pods to be ready..."
        # Wait specifically for the controller pod, not the completed job pod
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/component=manager -n jumpstarter-lab --timeout=300s || true
        
        echo "üìä Jumpstarter pod status:"
        kubectl get pods -n jumpstarter-lab
        
        echo "üîç Service status:"
        kubectl get svc -n jumpstarter-lab
        
        echo "‚úÖ Jumpstarter installation completed successfully!"

    - name: Set up Python environment
      run: |
        echo "üêç Setting up Python environment with uv..."
        # Ensure uv is in PATH
        if [ -f ~/.cargo/env ]; then
          source ~/.cargo/env
        fi
        export PATH="$HOME/.local/bin:$PATH"
        
        echo "üì¶ Installing dependencies from pyproject.toml..."
        uv sync
        
        echo "‚úÖ Python environment ready"
        uv run python --version

    - name: Configure DNS for testing
      run: |
        echo "üåê Configuring DNS for nip.io domains..."
        echo "127.0.0.1 grpc.jumpstarter.127.0.0.1.nip.io" | sudo tee -a /etc/hosts
        echo "127.0.0.1 router.jumpstarter.127.0.0.1.nip.io" | sudo tee -a /etc/hosts
        echo "127.0.0.1 jumpstarter.127.0.0.1.nip.io" | sudo tee -a /etc/hosts
        
        echo "üß™ Testing DNS resolution:"
        # Install dnsutils if needed for nslookup  
        sudo apt-get update -qq && sudo apt-get install -y dnsutils iputils-ping || true
        nslookup grpc.jumpstarter.127.0.0.1.nip.io || true
        ping -c 1 grpc.jumpstarter.127.0.0.1.nip.io || true

    - name: Test basic connectivity
      run: |
        echo "üîå Testing basic Jumpstarter connectivity..."
        
        # Test Kubernetes services are running
        kubectl get pods -n jumpstarter-lab
        kubectl get svc -n jumpstarter-lab
        
        # Test that services have endpoints
        kubectl get endpoints -n jumpstarter-lab
        
        echo "‚úÖ Basic connectivity tests completed"

    - name: Create and test Mock Exporter
      run: |
        echo "ü§ñ Testing Jumpstarter CLI functionality..."
        
        # Ensure uv is in PATH
        if [ -f ~/.cargo/env ]; then
          source ~/.cargo/env
        fi
        export PATH="$HOME/.local/bin:$PATH"
        
        # Test that CLI is working
        echo "üîç Testing admin CLI commands..."
        uv run jmp admin --help
        uv run jmp admin version
        
        # Test get command (updated from deprecated 'list')
        echo "ÔøΩ Testing admin get commands..."
        uv run jmp admin get --help
        
        echo "‚úÖ CLI functionality verified"

    - name: Robot Framework Test
      run: |
        echo "ü§ñ Running Robot Framework integration tests..."
        
        # Use the same make target as local development
        echo "ü§ñ Executing Robot Framework tests via Makefile..."
        make test-robot

    - name: Upload Robot Framework results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: robot-test-results
        path: tests/robot/results/
        retention-days: 30
        if-no-files-found: warn

    - name: Collect logs on failure
      if: failure()
      run: |
        echo "üí• Test failed - collecting debug information..."
        
        echo "=== Kubernetes Cluster Info ==="
        kubectl cluster-info
        
        echo "=== All Pods ==="
        kubectl get pods --all-namespaces
        
        echo "=== Jumpstarter Pods Logs ==="
        kubectl logs -n jumpstarter-lab -l app.kubernetes.io/name=jumpstarter-controller --tail=100 || true
        kubectl logs -n jumpstarter-lab -l app.kubernetes.io/name=jumpstarter-router --tail=100 || true
        
        echo "=== Services ==="
        kubectl get svc --all-namespaces
        
        echo "=== Ingress ==="
        kubectl get ingress --all-namespaces
        
        echo "=== Events ==="
        kubectl get events --all-namespaces --sort-by='.lastTimestamp' | tail -50

    - name: Cleanup
      if: always()
      run: |
        echo "üßπ Cleaning up test environment..."
        kind delete cluster || true
